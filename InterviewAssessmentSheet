*&---------------------------------------------------------------------*
*& Report Z_INTERVIEW_ASSESSMENT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT Z_INTERVIEW_ASSESSMENT.

TABLES: HRP1007, HRP1000, PB4002, PB0002, T528T.
DATA POS_NAM.

DATA ERR_MESSAGE TYPE STRING.


CLASS: LCL_ALV_TOOLBAR DEFINITION DEFERRED.
*Custom event-handler class for ALV toolbar
CLASS: LCL_EVENT_RECEIVER DEFINITION DEFERRED.

*Declaration for toolbar buttons
DATA: TY_TOOLBAR TYPE STB_BUTTON.

*Data declarations for ALV
DATA: C_CCONT              TYPE REF TO  CL_GUI_CUSTOM_CONTAINER,     "Custom container object
      C_ALVGD              TYPE REF TO  CL_GUI_ALV_GRID,             "ALV grid object
      IT_FCAT              TYPE         LVC_T_FCAT,                  "Field catalogue
      IT_LAYOUT            TYPE         LVC_S_LAYO,                  "Layout
      C_ALV_TOOLBAR        TYPE REF TO  LCL_ALV_TOOLBAR,             "Alv toolbar object: CUSTOM CLASS TO ADD MENU TO ALV TOOLBAR
      C_EVENT_RECEIVER     TYPE REF TO  LCL_EVENT_RECEIVER,
      C_ALV_TOOLBARMANAGER TYPE REF TO  CL_ALV_GRID_TOOLBAR_MANAGER. "Toolbar manager object: its method is used to display toolbar.

DATA: VARIANT TYPE  DISVARIANT.

DATA: OK_CODE TYPE SY-UCOMM.

DATA: IT_90431 TYPE TABLE OF PB9043,
      WA_90431 TYPE          PB9043.

TYPES: BEGIN OF DTYP_9043.
    INCLUDE TYPE P9043.
TYPES: LIGHT TYPE C,
       END OF DTYP_9043.

DATA: IT_9043 TYPE TABLE OF DTYP_9043,
      WA_9043 TYPE          DTYP_9043.

DATA: SAVE TYPE C VALUE 'X'.

"Do all the operations on 90431. And in the end, transfer it 9043 before saving.

DATA  P9043   TYPE P9043.

"Internal table of interviewer's pernrs
TYPES: BEGIN OF DTYP,
         PERNR TYPE APLNO,
       END OF DTYP.

DATA: IT_INTVWID TYPE TABLE OF DTYP,
      WA_INTVWID TYPE          DTYP.

"Internal table of interviewer id, name and designation
TYPES: BEGIN OF DTYP_INTVW,

         PERNR TYPE PA0001-PERNR,
         ENAME TYPE PA0001-ENAME,
         PLANS TYPE PA0001-PLANS,

       END OF DTYP_INTVW.

DATA: IT_INTVW TYPE TABLE OF DTYP_INTVW,
      WA_INTVW TYPE          DTYP_INTVW.


TYPES: BEGIN OF DTYP_VAC,
         OBJID TYPE HRP1007-OBJID,
       END OF DTYP_VAC.

DATA: IT_VAC_ID TYPE TABLE OF DTYP_VAC,
      WA_VAC_ID TYPE          DTYP_VAC.

TYPES: BEGIN OF DTYP_VACTN,
         PLANS TYPE T528T-PLANS,
         PLSTX TYPE T528T-PLSTX,
       END OF DTYP_VACTN.

DATA: IT_VACANCY TYPE TABLE OF DTYP_VACTN,
      WA_VACANCY TYPE          DTYP_VACTN.

DATA:RETURN LIKE  BAPIRETURN1.


DATA: IT_RET_VAC TYPE STANDARD TABLE OF DDSHRETVAL,
      IT_RET_ID  TYPE STANDARD TABLE OF DDSHRETVAL,
      WA_RET_VAC LIKE LINE OF IT_RET_VAC,
      WA_RET_ID  LIKE LINE OF IT_RET_ID.

CALL SCREEN 4000.

INITIALIZATION.
VARIANT-REPORT = SY-REPID.
VARIANT-USERNAME = SY-UNAME.


CLASS LCL_ALV_TOOLBAR DEFINITION.
  PUBLIC SECTION.
    METHODS:

      CONSTRUCTOR
        IMPORTING
          IO_ALV_GRID TYPE REF TO CL_GUI_ALV_GRID,

      ON_TOOLBAR
      FOR EVENT TOOLBAR
            OF CL_GUI_ALV_GRID
        IMPORTING
            E_OBJECT.
*  HANDLE_ON_TOOLBAR FOR EVENT TOOLBAR OF  CL_GUI_ALV_GRID IMPORTING E_OBJECT.
ENDCLASS.

CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS:

      CHECK_DATA_CHANGED
      FOR EVENT DATA_CHANGED
                    OF CL_GUI_ALV_GRID
        IMPORTING ER_DATA_CHANGED
                    E_ONF4
                    E_ONF4_BEFORE
                    E_ONF4_AFTER,

      HANDLE_USER_COMMAND
      FOR EVENT USER_COMMAND
            OF CL_GUI_ALV_GRID
        IMPORTING
            E_UCOMM.




ENDCLASS.

CLASS LCL_ALV_TOOLBAR IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    CREATE OBJECT C_ALV_TOOLBARMANAGER
      EXPORTING
        IO_ALV_GRID = IO_ALV_GRID.
  ENDMETHOD.

  METHOD ON_TOOLBAR.
    TY_TOOLBAR-ICON      =  ICON_GENERATE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-TEXT = 'Save'.
    TY_TOOLBAR-FUNCTION = 'SAVE_ALV'.

    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    TY_TOOLBAR-ICON      =  ICON_GENERATE.
    TY_TOOLBAR-BUTN_TYPE = 0.
    TY_TOOLBAR-TEXT = 'Print'.
    TY_TOOLBAR-FUNCTION = 'PRINT'.

    APPEND TY_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

**   Call reorganize method of toolbar manager to
**   display the toolbar
    CALL METHOD C_ALV_TOOLBARMANAGER->REORGANIZE
      EXPORTING
        IO_ALV_TOOLBAR = E_OBJECT.

  ENDMETHOD.

ENDCLASS.


CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.

  METHOD HANDLE_USER_COMMAND.

    IF E_UCOMM = 'SAVE_ALV'.
      PERFORM ALV_REPORT_LAYOUT.
      PERFORM ALV_GRID_SUB.
      IF SAVE = 'X'.
        PERFORM SAVE_ALV.
        ELSE.
          MESSAGE 'Cannot save marks greater than 10. Please fix entries marked red.' TYPE 'I'.
      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD CHECK_DATA_CHANGED.

  ENDMETHOD.


ENDCLASS.


SELECTION-SCREEN BEGIN OF SCREEN 100 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.

PARAMETERS: P_VAC    TYPE HRP1007-OBJID OBLIGATORY,
            POS_NAME TYPE HRP1000-STEXT MODIF ID 001,
            INTRV_ID TYPE APLNO OBLIGATORY,
            NAME     TYPE STEXT MODIF ID 001,
            DESGN    TYPE STEXT MODIF ID 001.

SELECTION-SCREEN END OF BLOCK B1.
SELECTION-SCREEN END OF SCREEN 100.

AT SELECTION-SCREEN OUTPUT.

  LOOP AT SCREEN.

    IF SCREEN-GROUP1 = '001'.
      SCREEN-INPUT = 0.
      MODIFY SCREEN.
    ENDIF.

  ENDLOOP.


AT SELECTION-SCREEN
  ON VALUE-REQUEST FOR INTRV_ID.

  SELECT PERNR ENAME PLANS
      FROM PA0001
      INTO CORRESPONDING FIELDS OF TABLE IT_INTVW
      WHERE ENDDA = '99991231'.

  LOOP AT IT_INTVW INTO WA_INTVW.

    WA_INTVWID-PERNR =  WA_INTVW-PERNR .
    APPEND WA_INTVWID TO IT_INTVWID.

  ENDLOOP.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE  = ' '
      RETFIELD        = 'PERNR'
*     PVALKEY         = ' '
      DYNPPROG        = SY-REPID
*     DYNPNR          = SY-REPID
*     DYNPROFIELD     = ' '
*     STEPL           = 0
*     WINDOW_TITLE    =
*     VALUE           = ' '
      VALUE_ORG       = 'S'
*     MULTIPLE_CHOICE = ' '
*     DISPLAY         = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM   = ' '
*     CALLBACK_METHOD =
*     MARK_TAB        =
* IMPORTING
*     USER_RESET      =
    TABLES
      VALUE_TAB       = IT_INTVWID
*     FIELD_TAB       =
      RETURN_TAB      = IT_RET_ID
*     DYNPFLD_MAPPING =
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RET_ID INTO WA_RET_ID INDEX 1.
  INTRV_ID = WA_RET_ID-FIELDVAL.


AT SELECTION-SCREEN
  ON VALUE-REQUEST FOR P_VAC.

  "Pick active vacancies
  SELECT OBJID
  FROM HRP1007
  INTO CORRESPONDING FIELDS OF TABLE IT_VAC_ID
  WHERE OTYPE = 'S'
  AND ENDDA = '99991231'. "QUESTION: WILL EACH VACANCY HAVE AN ACTIVE RECORD?


  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE  = ' '
      RETFIELD        = 'OBJID'
*     PVALKEY         = ' '
      DYNPPROG        = SY-REPID
*     DYNPNR          = ' '
*     DYNPROFIELD     = ' '
*     STEPL           = 0
*     WINDOW_TITLE    =
*     VALUE           = ' '
      VALUE_ORG       = 'S' "WHY
*     MULTIPLE_CHOICE = ' '
*     DISPLAY         = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM   = ' '
*     CALLBACK_METHOD =
*     MARK_TAB        =
*    IMPORTING
*     USER_RESET      =
    TABLES
      VALUE_TAB       = IT_VAC_ID
*     FIELD_TAB       =
      RETURN_TAB      = IT_RET_VAC
*     DYNPFLD_MAPPING =
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
  IF SY-SUBRC <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE IT_RET_VAC INTO WA_RET_VAC INDEX 1.
  P_VAC = WA_RET_VAC-FIELDVAL.

*&---------------------------------------------------------------------*
*& Module STATUS_4000 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE STATUS_4000 OUTPUT.
  SET PF-STATUS 'ZINTERVIEW'.
  SET TITLEBAR 'INTERVIEW_ASSESSMENT'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_4000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_4000 INPUT.

  CASE OK_CODE.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'ENTER'.

      PERFORM FILL_ENTRIES.
      PERFORM FETCHDATA.
      PERFORM ALV_GRID_SUB.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
TYPES: BEGIN OF TY_TAB,
         PERNR TYPE PB4002-PERNR,
         VORNA TYPE PB0002-VORNA,
         NACHN TYPE PB0002-NACHN,
       END OF TY_TAB.
DATA: TY_ITAB  TYPE TABLE OF TY_TAB,
      TY_WA    TYPE          TY_TAB,
      WA_PERNR TYPE         PB4002-PERNR.
FORM FETCHDATA.

  CLEAR IT_9043.
  CLEAR TY_ITAB.
  CLEAR WA_9043.

  SELECT *
  FROM PB9043
  INTO CORRESPONDING FIELDS OF TABLE IT_9043
  WHERE VACANCY = P_VAC.

  SELECT DISTINCT PERNR
    FROM PB4002
    INTO TABLE @DATA(ITAB_PERNR)
    WHERE OBJID = @P_VAC.


  IF ITAB_PERNR IS NOT INITIAL.

    SELECT PERNR VORNA NACHN
    FROM PB0002
    INTO CORRESPONDING FIELDS OF TABLE TY_ITAB
      FOR ALL ENTRIES IN ITAB_PERNR
    WHERE PERNR = ITAB_PERNR-PERNR.

  ENDIF.

  LOOP AT ITAB_PERNR INTO WA_PERNR.
    "Check if pernr is present in table it_9043

    READ TABLE IT_9043 INTO WA_9043 WITH KEY APP_ID = WA_PERNR.

    IF SY-SUBRC = 0.  "Pernr is present!
      CLEAR WA_9043.
      CLEAR WA_9043.
      CONTINUE. "Nothing to do with this entry.

    ELSE. "New applicant's pernr

      WA_9043-APP_ID = WA_PERNR. "pernr
      WA_9043-PERNR = WA_PERNR.
      WA_9043-VACANCY = P_VAC.
      WA_9043-ENDDA = '99991231'.
      WA_9043-BEGDA = '18000101'.

      READ TABLE TY_ITAB INTO TY_WA WITH KEY PERNR = WA_PERNR.
      CONCATENATE TY_WA-VORNA TY_WA-NACHN INTO WA_9043-APP_DET SEPARATED BY ' '.

      APPEND WA_9043 TO IT_9043.

    ENDIF.

    CLEAR WA_9043.
    CLEAR TY_WA.

  ENDLOOP.

ENDFORM.
FORM ALV_BUILD_FIELDCAT.

  DATA FIELDCATALOG TYPE LVC_S_FCAT.

  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'LIGHTS'.
  FIELDCATALOG-SCRTEXT_M = 'Status'.
  FIELDCATALOG-COL_POS = 0.
  FIELDCATALOG-OUTPUTLEN = 20.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.

  FIELDCATALOG-FIELDNAME = 'APP_ID'.
  FIELDCATALOG-SCRTEXT_M = 'Applicant ID'.
  FIELDCATALOG-COL_POS = 1.
  FIELDCATALOG-OUTPUTLEN = 20.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.




  FIELDCATALOG-FIELDNAME = 'APP_DET'.
  FIELDCATALOG-SCRTEXT_M = 'Applicant Details'.
  FIELDCATALOG-COL_POS = 2.
  FIELDCATALOG-OUTPUTLEN = 20.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.




  FIELDCATALOG-FIELDNAME = 'QUALFN'.
  FIELDCATALOG-SCRTEXT_M = 'Qualifications'.
  FIELDCATALOG-COL_POS = 3.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.




  FIELDCATALOG-FIELDNAME = 'DESGNTN'.
  FIELDCATALOG-SCRTEXT_M = 'Job Designation'.
  FIELDCATALOG-COL_POS = 4.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'EXPRNCE'.
  FIELDCATALOG-SCRTEXT_M = 'Experience'.
  FIELDCATALOG-COL_POS = 5.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'CRTFC_TRNG'.
  FIELDCATALOG-SCRTEXT_M = 'Certifications/Trainings'.
  FIELDCATALOG-COL_POS = 6.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'COMMNCTN'.
  FIELDCATALOG-SCRTEXT_M = 'Communication'.
  FIELDCATALOG-COL_POS = 7.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'PLANNING'.
  FIELDCATALOG-SCRTEXT_M = 'Planning and Implementation'.
  FIELDCATALOG-COL_POS = 8.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'SOFTSKILL'.
  FIELDCATALOG-SCRTEXT_M = 'Soft skills'.
  FIELDCATALOG-COL_POS = 9.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'MNGMTSKILL'.
  FIELDCATALOG-SCRTEXT_M = 'Management skills'.
  FIELDCATALOG-COL_POS = 10.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'PR'.
  FIELDCATALOG-SCRTEXT_M = 'Public Relations'.
  FIELDCATALOG-COL_POS = 11.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'PROB_SOLVNG'.
  FIELDCATALOG-SCRTEXT_M = 'Problem Solving'.
  FIELDCATALOG-COL_POS = 12.
  FIELDCATALOG-OUTPUTLEN = 20.
  FIELDCATALOG-EDIT = 'X'.
  APPEND FIELDCATALOG TO IT_FCAT .
  CLEAR FIELDCATALOG.


  FIELDCATALOG-FIELDNAME = 'TOTAL'.
  FIELDCATALOG-SCRTEXT_M = 'Total'.
  FIELDCATALOG-COL_POS = 13.
  FIELDCATALOG-OUTPUTLEN = 20.


  APPEND FIELDCATALOG TO IT_FCAT .


  CLEAR FIELDCATALOG.


ENDFORM.
FORM ALV_GRID_SUB .
  IF C_CCONT IS INITIAL.

    CREATE OBJECT C_EVENT_RECEIVER.

*create object for custom container
    CREATE OBJECT C_CCONT
      EXPORTING
        CONTAINER_NAME = 'CC_CONT'.

*create object of alv grid
    CREATE OBJECT C_ALVGD
      EXPORTING
        I_PARENT = C_CCONT.

* create ALV event handler
    CREATE OBJECT C_ALV_TOOLBAR
      EXPORTING
        IO_ALV_GRID = C_ALVGD.

* Register event handler
    SET HANDLER C_ALV_TOOLBAR->ON_TOOLBAR FOR C_ALVGD.

    SET HANDLER C_EVENT_RECEIVER->HANDLE_USER_COMMAND FOR C_ALVGD.

    SET HANDLER C_EVENT_RECEIVER->CHECK_DATA_CHANGED FOR C_ALVGD.

* Fieldcatalogue for ALV
    PERFORM ALV_BUILD_FIELDCAT.

* ALV attributes FOR LAYOUT
    PERFORM ALV_REPORT_LAYOUT.

*  CHECK NOT c_alvgd IS INITIAL.

* Call ALV GRID
    CALL METHOD C_ALVGD->SET_TABLE_FOR_FIRST_DISPLAY
      EXPORTING
        I_STRUCTURE_NAME              = 'IT_9043'
        I_SAVE                        = 'U'
        IS_LAYOUT                     = IT_LAYOUT
      CHANGING
        IT_OUTTAB                     = IT_9043
        IT_FIELDCATALOG               = IT_FCAT
      EXCEPTIONS
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        OTHERS                        = 4.
    IF SY-SUBRC <> 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.

  ELSE.

    CALL METHOD C_ALVGD->REFRESH_TABLE_DISPLAY.

  ENDIF.

ENDFORM.
FORM ALV_REPORT_LAYOUT.

  PERFORM ADJUST_TRAFFIC_LIGHTS.

  IT_LAYOUT-CWIDTH_OPT = 'X'.
  IT_LAYOUT-ZEBRA = 'X'.
  IT_LAYOUT-EXCP_FNAME = 'LIGHT'.
  IT_LAYOUT-EXCP_LED      = 'X'.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SAVE_ALV
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SAVE_ALV .

  DATA: DUMMY    TYPE TABLE OF PB9043,
        WA_DUMMY TYPE       PB9043,
        OPR      LIKE       PSPAR-ACTIO.

  SELECT *
    FROM PB9043
    INTO CORRESPONDING FIELDS OF TABLE DUMMY
    WHERE VACANCY = P_VAC.

  LOOP AT IT_9043 INTO WA_9043.

    WA_9043-INTRV_ID = INTRV_ID.
    WA_9043-VACANCY = P_VAC.

    MOVE-CORRESPONDING WA_9043 TO P9043.

    READ TABLE DUMMY INTO WA_DUMMY WITH KEY PERNR = WA_9043-PERNR.

    IF SY-SUBRC = 0. "Pernr/applicant is present
      OPR = 'MOD'.
    ELSE. "not present
      OPR = 'INS'.
    ENDIF.

    P9043-INFTY = '9043'.

    CALL FUNCTION 'BAPI_APPLICANT_ENQUEUE'
      EXPORTING
        APPLICANTNUMBER = P9043-PERNR
      IMPORTING
        RETURN          = RETURN.

    CALL FUNCTION 'HR_INFOTYPE_OPERATION'
      EXPORTING
        INFTY         = '9043'
        NUMBER        = P9043-PERNR
*       SUBTYPE       =
*       OBJECTID      =
*       LOCKINDICATOR =
        VALIDITYEND   = '99991231'
        VALIDITYBEGIN = '18000101'
*       RECORDNUMBER  =
        RECORD        = P9043
        OPERATION     = OPR
        TCLAS         = 'B'
*       DIALOG_MODE   = '0'
*       NOCOMMIT      =
*       VIEW_IDENTIFIER        =
*       SECONDARY_RECORD       =
      IMPORTING
        RETURN        = RETURN
*       KEY           =
      .

    CALL FUNCTION 'BAPI_APPLICANT_DEQUEUE'
      EXPORTING
        APPLICANTNUMBER = P9043-PERNR
      IMPORTING
        RETURN          = RETURN.
    .

  ENDLOOP.


  IF RETURN-NUMBER = 0.
    MESSAGE 'Saved' TYPE 'S'.
  ELSE.
    CONCATENATE ERR_MESSAGE RETURN-MESSAGE INTO ERR_MESSAGE SEPARATED BY ' '.
*    MESSAGE ERR_MESSAGE TYPE 'E' DISPLAY LIKE 'I'.
    MESSAGE ERR_MESSAGE TYPE 'I'.
  ENDIF.

  CLEAR DUMMY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  INPUT_COMMAND_4000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE INPUT_COMMAND_4000 INPUT.
  "DELETE THIS.

ENDMODULE.
*&---------------------------------------------------------------------*
*& Form FILL_ENTRIES
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM FILL_ENTRIES .

  "PICK INTO ITAB EVERYTHING FOR VACANCY P_vAC
  SELECT SINGLE PLANS, PLSTX "position, position text
    FROM T528T
    INTO @WA_VACANCY
    WHERE PLANS = @P_VAC
    AND ENDDA = '99991231'.

  POS_NAME = WA_VACANCY-PLSTX.

  SELECT SINGLE PERNR, ENAME, PLANS
      FROM PA0001
      INTO @WA_INTVW
      WHERE ENDDA = '99991231'
      AND PERNR = @INTRV_ID.

  NAME = WA_INTVW-ENAME.
  DESGN = WA_INTVW-PLANS.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form ADJUST_TRAFFIC_LIGHTS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM ADJUST_TRAFFIC_LIGHTS .

SAVE = 'X'.

  LOOP AT IT_9043 INTO WA_9043.

    IF WA_9043-QUALFN > 10
      OR WA_9043-DESGNTN  > 10
      OR WA_9043-EXPRNCE > 10
      OR WA_9043-CRTFC_TRNG > 10
      OR WA_9043-COMMNCTN > 10
      OR WA_9043-PLANNING > 10
      OR WA_9043-SOFTSKILL > 10
      OR WA_9043-MNGMTSKILL > 10
      OR WA_9043-PR > 10
      OR WA_9043-PROB_SOLVNG > 10.

      WA_9043-LIGHT = '1'.
      SAVE = ' '.

    ELSE.

      "sum them all up into total.
      WA_9043-TOTAL = WA_9043-DESGNTN + WA_9043-EXPRNCE + WA_9043-CRTFC_TRNG + WA_9043-COMMNCTN + WA_9043-PLANNING
      + WA_9043-SOFTSKILL + WA_9043-MNGMTSKILL + WA_9043-PR + WA_9043-PROB_SOLVNG + WA_9043-QUALFN .
      WA_9043-LIGHT = '3'.

    ENDIF.

    MODIFY IT_9043 FROM WA_9043 TRANSPORTING LIGHT TOTAL.

  ENDLOOP.

ENDFORM.
